package main

import (
	"fmt"
	"time" // 导入时间处理包
)

func main() {
	p := fmt.Println

	// 获取当前时间
	t := time.Now()
	// 使用RFC3339格式输出时间（ISO 8601标准格式）
	p(t.Format(time.RFC3339))

	// 解析RFC3339格式的时间字符串
	t1, e := time.Parse(
		time.RFC3339,
		"2012-11-01T22:08:41+00:00")
	p(t1)

	// 使用自定义格式输出时间
	p(t.Format("3:04PM"))                           // 12小时制，带AM/PM
	p(t.Format("Mon Jan _2 15:04:05 2006"))         // 标准格式，_2表示日期前导空格
	p(t.Format("2006-01-02T15:04:05.999999-07:00")) // 带微秒和时区偏移

	// 解析自定义格式的时间字符串
	form := "3 04 PM"                    // 定义解析格式
	t2, e := time.Parse(form, "8 41 PM") // 解析时间字符串
	p(t2)

	// 使用printf手动格式化时间（传统方式）
	fmt.Printf("%d-%02d-%02dT%02d:%02d:%02d-00:00\n",
		t.Year(), t.Month(), t.Day(),
		t.Hour(), t.Minute(), t.Second())

	// 演示解析错误：格式不匹配
	ansic := "Mon Jan _2 15:04:05 2006" // ANSIC格式
	_, e = time.Parse(ansic, "8:41PM")  // 尝试解析不匹配的格式
	p(e)                                // 输出解析错误
}

/*
Go语言时间格式化和解析示例 - 时间字符串处理

主旨：
1. 演示time包中时间格式化和解析的方法
2. 展示Go语言时间格式化的特殊语法
3. 理解时间格式模板的使用
4. 学习常用时间格式和自定义格式

关键特性：
- Go使用2006-01-02 15:04:05作为时间格式模板
- 支持标准格式常量和自定义格式
- 提供Format()和Parse()函数进行格式化/解析
- 支持时区信息和精度控制

Go时间格式模板说明：
Go语言使用一个特殊的时间作为格式模板：2006年1月2日 15:04:05
- 2006：年份
- 01：月份
- 02：日期
- 15：小时（24小时制）
- 04：分钟
- 05：秒

常用格式常量：
- time.RFC3339：ISO 8601标准格式
- time.RFC822：RFC 822格式
- time.ANSIC：ANSI C格式
- time.UnixDate：Unix日期格式
- time.RubyDate：Ruby日期格式

格式符号详解：
- 2006：4位年份
- 06：2位年份
- 01：2位月份
- 1：1位月份（无前导零）
- 02：2位日期
- 2：1位日期（无前导零）
- _2：1位日期（前导空格）
- 15：24小时制小时
- 3：12小时制小时
- 04：分钟
- 05：秒
- .999：毫秒
- .999999：微秒
- .999999999：纳秒
- PM：AM/PM标识
- -07：时区偏移
- -0700：时区偏移（无冒号）
- MST：时区缩写

输出示例：
2024-01-15T10:30:45+08:00
2012-11-01 22:08:41 +0000 UTC
10:30AM
Mon Jan 15 10:30:45 2024
2024-01-15T10:30:45.123456+08:00
0000-01-01 20:41:00 +0000 UTC
2024-01-15T10:30:45-00:00
parsing time "8:41PM" as "Mon Jan _2 15:04:05 2006": cannot parse "8:41PM" as "Mon"

时间格式化最佳实践：
```go
// 常用格式
t.Format("2006-01-02 15:04:05")           // 标准日期时间
t.Format("2006-01-02")                     // 仅日期
t.Format("15:04:05")                       // 仅时间
t.Format("2006年01月02日 15时04分05秒")     // 中文格式
t.Format("Jan 2, 2006 at 3:04pm")         // 英文格式

// 带时区的格式
t.Format("2006-01-02T15:04:05Z07:00")     // RFC3339
t.Format("2006-01-02 15:04:05 -0700")     // 带时区偏移

// 高精度格式
t.Format("2006-01-02T15:04:05.999999Z07:00") // 微秒精度
```

实际应用场景：
- 日志时间格式化
- API接口时间参数
- 数据库时间字段
- 配置文件时间格式
- 用户界面时间显示
- 文件命名时间戳

注意事项：
- 格式模板必须使用2006-01-02 15:04:05作为参考
- 解析时格式必须完全匹配
- 时区信息很重要，避免时区混淆
- 错误处理：解析失败会返回错误
- 性能考虑：频繁格式化考虑缓存格式模板

常见错误：
- 使用错误的年份（如2023而不是2006）
- 格式不匹配导致解析失败
- 忽略时区信息
- 精度丢失（如纳秒精度）
*/
